import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import CommandStart
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
TOKEN = '7221891102:AAGog7UYTggf8-eQxYWYUfEB0GNKhbWKZ3Q'
SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1h9fonsw1wBFi7dDnT-0fod8BTxakW8f6tF56Au2ujEc/edit?usp=sharing'
DRIVE_FOLDER_URL = 'https://drive.google.com/drive/folders/1VcyrHUebwuHGI6_wDwWCIbKcjVTd4XNt?usp=sharing'
SCHEDULE_URL = 'https://docs.google.com/spreadsheets/d/1KuLSlD6ctB-B5960jKBzkpZGyGqd7jgo/edit?usp=sharing'

# --- Google API ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
CREDENTIALS_FILE = r'set/credentials.json'

creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
gs_client = gspread.authorize(creds)
sheet = gs_client.open_by_url(SPREADSHEET_URL).sheet1

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = Bot("7221891102:AAGog7UYTggf8-eQxYWYUfEB0GNKhbWKZ3Q")
dp = Dispatcher()

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ---
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞')],
    [KeyboardButton(text='üíµ –ü—Ä–∏–±—É—Ç–æ–∫/–≤–∏—Ç—Ä–∞—Ç–∏')],
    [KeyboardButton(text='üìÖ –ì—Ä–∞—Ñ—ñ–∫')]
], resize_keyboard=True)

finance_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üíµ –Ü–Ω–∫–∞—Å–∞—Ü—ñ—è –≥–æ—Ç—ñ–≤–∫–∏')],
    [KeyboardButton(text='üí∏ –í–∏—Ç—Ä–∞—Ç–∏ –≥–æ—Ç—ñ–≤–∫–∏')],
    [KeyboardButton(text='üßæ Z-–∑–≤—ñ—Ç —Ç–µ—Ä–º—ñ–Ω–∞–ª')],
    [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
], resize_keyboard=True)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ DruidBot! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu)

# --- –ü–æ—Å—Ç–∞–≤–∫–∞ ---
@dp.message(lambda message: message.text == 'üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞')
async def handle_supply(message: types.Message):
    await message.answer("üì∏ –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó, —ñ —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ —É –ø–∞–ø—Ü—ñ Druid –ù–ê–ö–õ–ê–î–ù–Ü.")

@dp.message(lambda message: message.photo)
async def save_invoice_photo(message: types.Message):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    destination = f"C:/Users/Lenovo/druidbot/invoices/{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.jpg"
    await bot.download_file(file_path, destination)
    await message.answer("‚úÖ –§–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

# --- –ü—Ä–∏–±—É—Ç–æ–∫/–≤–∏—Ç—Ä–∞—Ç–∏ ---
@dp.message(lambda message: message.text == 'üíµ –ü—Ä–∏–±—É—Ç–æ–∫/–≤–∏—Ç—Ä–∞—Ç–∏')
async def finance_menu_handler(message: types.Message):
    await message.answer("üíº –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=finance_menu)

@dp.message(lambda message: message.text in ['üíµ –Ü–Ω–∫–∞—Å–∞—Ü—ñ—è –≥–æ—Ç—ñ–≤–∫–∏', 'üí∏ –í–∏—Ç—Ä–∞—Ç–∏ –≥–æ—Ç—ñ–≤–∫–∏', 'üßæ Z-–∑–≤—ñ—Ç —Ç–µ—Ä–º—ñ–Ω–∞–ª'])
async def finance_report(message: types.Message):
    report_type = message.text
    await message.answer(f"üìù –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è: {report_type}")

    @dp.message(lambda message: message.text.isdigit())
    async def save_finance(message: types.Message):
        amount = message.text
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        sheet.append_row([now, report_type, amount])
        await message.answer(f"‚úÖ {report_type} –Ω–∞ —Å—É–º—É {amount} –≥—Ä–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_menu)

# --- –ì—Ä–∞—Ñ—ñ–∫ ---
@dp.message(lambda message: message.text == 'üìÖ –ì—Ä–∞—Ñ—ñ–∫')
async def show_schedule(message: types.Message):
    await message.answer(f"üóìÔ∏è –í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—É—Ç: {SCHEDULE_URL}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
